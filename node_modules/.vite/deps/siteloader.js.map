{
  "version": 3,
  "sources": ["../../siteloader/dist/sl.js"],
  "sourcesContent": ["class l {\n  /**\n    * @typedef {Object} StageObj - 特别的\n    * @property {String} [stageName] - 如果不分阶段加载的话就不需要这个属性\n    */\n  /**\n   * \n   * @param {StageObj[]} stageArr - 特别的 {@link StageObj}\n   */\n  constructor(e) {\n    this._allResorceData = e, this._allResourceCount = 0, this._allDoms = {\n      imgsDoms: [],\n      mediaDoms: []\n    }, this._allResourcesTag = {}, this._isStageLoad = e && e.length > 1, this._stageDoms = [], this._stageResourceCount = {}, this._stageResourceLoadedCount = {}, this._addonLoadedRatio = 0, this._addonLoadFunc = null, this._targetTextDom = null, this._targetProgress = 20, this._loadedCount = 0, this._progress = 0, this._progressChangeTimer = null, this._events = {\n      beforeStart: null,\n      countComplete: null,\n      trueLoadFinish: null,\n      // error: null,\n      progress: null\n    }, this.progressSpeed = 20, this.needSpeedUp = !1, this._isStageLoad && this._allResorceData.forEach((t) => {\n      this._events[t.stageName] = null;\n    }), this._errorCheck();\n  }\n  _errorCheck() {\n    if (this._allResorceData && this._allResorceData.length === 0)\n      throw new Error(\"no resource data | 不能传入空数组，没有资源数据\");\n    if (this._allResorceData && !(this._allResorceData instanceof Array))\n      throw new Error(\"传入的必须是一个数组 | resource data must be array\");\n    if (this._isStageLoad) {\n      this._allResorceData.forEach((s) => {\n        var r;\n        if (!s.stageName)\n          throw new Error(\"没有设置stageName | no stageName\");\n        if (((r = s.sources) == null ? void 0 : r.length) === 0 || !s.sources)\n          throw new Error(\"没有设置资源数据 sources data | no sources\");\n        if (!(s.sources instanceof Array))\n          throw new Error(\"资源数据sources必须是数组 | sources must be array\");\n        s.sources && s.sources.forEach((o) => {\n          if (![\"image\", \"font\", \"media\"].includes(o.sourceType))\n            throw new Error(\"sourceType is not correct | sourceType 名称不对，只能是image font或者media（视频或者音频）\");\n        });\n      });\n      const e = this._allResorceData.map((s) => s.stageName);\n      if (new Set(e).size !== this._allResorceData.length)\n        throw new Error(\"stageName 重复 | stageName is repeat\");\n    } else {\n      if (this._allResorceData && !this._allResorceData[0].sources)\n        throw new Error(\"没有设置资源数据 sources data | no sources\");\n      if (this._allResorceData && !(this._allResorceData[0].sources instanceof Array))\n        throw new Error(\"资源数据sources必须是数组 | sources must be array\");\n      this._allResorceData && this._allResorceData[0].sources.forEach((e) => {\n        if (![\"image\", \"font\", \"media\"].includes(e.sourceType))\n          throw new Error(\"sourceType is not correct | sourceType 名称不对，只能是image font或者media（视频或者音频）\");\n      });\n    }\n  }\n  setTargetTextDom(e) {\n    const t = document.querySelector(e);\n    this._targetTextDom = t;\n  }\n  startLoad() {\n    this._events.beforeStart && this._events.beforeStart(), this._loaderInit(), this._progressDetect(), this._addonLoadFunc && this._addonLoadFunc();\n  }\n  _errorLoad(e, t) {\n    this._loadedCount++, this._trueLoadControl(), console.warn(`加载${e}资源${t}失败`);\n  }\n  _loaderInit() {\n    this._allResorceData ? this._allResorceData.forEach((e) => {\n      this._isStageLoad ? this._stageResourceInit(e) : this._allResourceInit(e);\n    }) : this._emptyParamInit(), this._allResorceData && this._allResorceData.length > 1 ? this._mutileStageStartLoad(this._allResorceData[0].stageName) : this._allLoad();\n  }\n  // _checkRepeatSource() {\n  //   // 检查this._allDom.imgsDoms中的资源的src属性是否有重复的\n  //   const allImgsSrc = this._allDom.imgsDoms.map((img) => {\n  //       return img.currentSrc || img.src\n  //   })\n  //   const allImgsSrcSet = new Set(allImgsSrc)\n  //   if (allImgsSrcSet.size !== allImgsSrc.length) {\n  //       // \n  //   }\n  //   // 检查this._allDom.mediaDoms中的资源的src属性是否有重复的\n  //   const allMediaSrc = this._allDom.mediaDoms.map((media) => {\n  //       return media.currentSrc || media.src\n  //   })\n  //   const allMediaSrcSet = new Set(allMediaSrc)\n  //   if (allMediaSrcSet.size !== allMediaSrc.length) {\n  //   }\n  // }\n  _emptyParamInit() {\n    const e = document.querySelectorAll(\"img\"), t = document.querySelectorAll(\"video\"), s = document.querySelectorAll(\"audio\");\n    console.log(e, t, s), this._allDoms.imgsDoms = Array.from(e), this._allDoms.mediaDoms = Array.from(t).concat(Array.from(s)), this._allResourceCount = this._allDoms.imgsDoms.length + this._allDoms.mediaDoms.length;\n  }\n  // 整体加载的资源初始化\n  _allResourceInit(e) {\n    e.sources.forEach((t) => {\n      t.sourceType === \"image\" ? t.selectors.forEach((s) => {\n        const r = document.querySelectorAll(s);\n        r.forEach((o) => {\n          this._allResourcesTag[o.currentSrc || o.src] = !1;\n        }), this._allDoms.imgsDoms = [...this._allDoms.imgsDoms, ...r], this._allResourceCount += r.length;\n      }) : t.sourceType === \"media\" && t.selectors.forEach((s) => {\n        const r = document.querySelectorAll(s);\n        r.forEach((o) => {\n          this._allResourcesTag[o.src] = !1;\n        }), this._allDoms.mediaDoms = [...this._allDoms.mediaDoms, ...r], this._allResourceCount += r.length;\n      });\n    });\n  }\n  // 分阶段加载的资源初始化\n  _stageResourceInit(e) {\n    this._stageResourceCount[e.stageName] = 0, this._stageResourceLoadedCount[e.stageName] = 0, e.sources.forEach((t) => {\n      this._stageDoms[e.stageName] = this._stageDoms[e.stageName] || {}, this._stageDoms[e.stageName][t.sourceType] = this._stageDoms[e.stageName][t.sourceType] || [], t.sourceType === \"image\" ? t.selectors.forEach((s) => {\n        const r = document.querySelectorAll(s);\n        r.forEach((o) => {\n          this._allResourcesTag[o.currentSrc || o.src] = !1;\n        }), this._stageDoms[e.stageName][t.sourceType] = [...this._stageDoms[e.stageName][t.sourceType], ...r], this._allResourceCount += r.length, this._stageResourceCount[e.stageName] += r.length;\n      }) : t.sourceType === \"media\" && t.selectors.forEach((s) => {\n        const r = document.querySelectorAll(s);\n        r.forEach((o) => {\n          this._allResourcesTag[o.src] = !1;\n        }), this._stageDoms[e.stageName][t.sourceType] = [...this._stageDoms[e.stageName][t.sourceType], ...r], this._allResourceCount += r.length, this._stageResourceCount[e.stageName] += r.length;\n      });\n    });\n  }\n  // 整体加载调用的方法\n  _allLoad() {\n    this._allDoms.imgsDoms.length > 0 && this._loadAllImg(), this._allDoms.mediaDoms.length > 0 && this._loadAllMedia();\n  }\n  // 整体加载的图片加载方法\n  _loadAllImg() {\n    this._allDoms.imgsDoms.forEach((e) => {\n      e.onload = () => {\n        this._allResourcesTag[e.currentSrc || e.src] || (this._loadedCount++, this._trueLoadControl(), this._allResourcesTag[e.currentSrc || e.src] = !0);\n      }, e.onerror = () => {\n        this._allResourcesTag[e.currentSrc || e.src] || (this._errorLoad(\"图片\", e.currentSrc || e.src), this._allResourcesTag[e.currentSrc || e.src] = !0);\n      }, e.src = e.currentSrc || e.src;\n    });\n  }\n  // 整体加载的媒体加载方法\n  _loadAllMedia() {\n    this._allDoms.mediaDoms.forEach((e) => {\n      e.addEventListener(\"canplaythrough\", () => {\n        this._allResourcesTag[e.src] || (this._loadedCount++, this._trueLoadControl(), this._allResourcesTag[e.src] = !0);\n      }), e.addEventListener(\"error\", () => {\n        this._allResourcesTag[e.src] || (this._errorLoad(\"音频/视频\", e.currentSrc || e.src), this._allResourcesTag[e.src] = !0);\n      }), e.src = e.currentSrc || e.src;\n    });\n  }\n  // 分阶段加载调用的方法\n  _mutileStageStartLoad(e) {\n    const t = this._stageDoms[e];\n    for (let s in t)\n      s === \"image\" ? this._loadStageImg(t[s], e) : s === \"media\" && this._loadStageMedia(t[s], e);\n  }\n  // 分阶段加载用的图片加载    传入的是img元素DOM的数组\n  _loadStageImg(e, t) {\n    e.forEach((s) => {\n      s.onload = () => {\n        this._allResourcesTag[s.currentSrc || s.src] || (this._stageResourceLoadedCount[t]++, this._loadedCount++, this._stageLoadCheck(t), this._trueLoadControl(), this._allResourcesTag[s.currentSrc || s.src] = !0);\n      }, s.onerror = () => {\n        this._allResourcesTag[s.currentSrc || s.src] || (this._errorLoad(\"图片\", s.currentSrc || s.src), this._allResourcesTag[s.currentSrc || s.src] = !0);\n      }, s.src = s.currentSrc || s.src;\n    });\n  }\n  // 分阶段加载用的媒体加载   传入的是媒体元素DOM的数组\n  _loadStageMedia(e, t) {\n    e.forEach((s) => {\n      s.addEventListener(\"canplaythrough\", () => {\n        this._allResourcesTag[s.src] || (this._stageResourceLoadedCount[t]++, this._loadedCount++, this._stageLoadCheck(t), this._trueLoadControl(), this._allResourcesTag[s.src] = !0);\n      }), s.addEventListener(\"error\", () => {\n        this._allResourcesTag[s.src] || (this._errorLoad(\"音频/视频\", s.currentSrc || s.src), this._allResourcesTag[s.src] = !0);\n      }), s.src = s.currentSrc || s.src;\n    });\n  }\n  // 每次分阶段加载每加载完一个资源 都要在资源完成的会调用使用的方法 用来检测分阶段的加载进度\n  _stageLoadCheck(e) {\n    this._stageResourceLoadedCount[e] === this._stageResourceCount[e] && (this._events[e] && this._events[e](), this._allResorceData.forEach((t, s) => {\n      if (t.stageName === e) {\n        if (s === this._allResorceData.length - 1)\n          return;\n        this._mutileStageStartLoad(this._allResorceData[s + 1].stageName);\n      }\n    }));\n  }\n  // 加载整体进度的检测方法 不管是分阶段加载还是整体加载都会调用\n  _progressDetect() {\n    const e = () => {\n      this._progress < this._targetProgress && (this._progress++, this._targetTextDom && (this._targetTextDom.innerText = this._progress), this._events.progress({\n        progress: this._progress\n      }), this._progress === this._targetProgress && clearInterval(this._progressChangeTimer), this._progress === 100 && this._loadFinish(), this._progress < 60 && this._targetProgress === 100 && this.needSpeedUp && (clearInterval(this._progressChangeTimer), this._progressChangeTimer = setInterval(e, 0), this.needSpeedUp = !1));\n    };\n    this._progressChangeTimer = setInterval(e, this.progressSpeed);\n  }\n  // 用来控制加载进度目标的方法 \n  _trueLoadControl() {\n    const e = this._loadedCount / this._allResourceCount;\n    this._addonLoadFunc ? (this._targetProgress = Math.ceil(e * 40) + Math.ceil(this._addonLoadedRatio * 30) + 20, e === 1 && this._addonLoadedRatio === 1 && (this._targetProgress = 100, this._events.trueLoadFinish && this._events.trueLoadFinish())) : (this._targetProgress = Math.ceil(e * 60) + 20, e === 1 && (this._targetProgress = 100, this._events.trueLoadFinish && this._events.trueLoadFinish()));\n  }\n  setAddonLoadFunc(e) {\n    this._addonLoadFunc = e;\n  }\n  setAddonLoadData(e) {\n    this._addonLoadedRatio = e, this._trueLoadControl();\n  }\n  // 整个加载进度包括计数到100之后调用的方法\n  _loadFinish() {\n    clearInterval(this._progressChangeTimer), this._events.countComplete && this._events.countComplete();\n  }\n  // 设置事件的方法\n  addEventListener(e, t) {\n    if (e in this._events)\n      this._events[e] = t;\n    else\n      throw new Error(\"没有这个名字的事件可以设置\");\n  }\n}\nexport {\n  l as default\n};\n"],
  "mappings": "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",
  "names": []
}
